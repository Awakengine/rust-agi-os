warning: unused imports: `Add`, `Div`, `Mul`, and `Sub`
 --> crates/agi-core/src/tensor.rs:6:16
  |
6 | use std::ops::{Add, Sub, Mul, Div};
  |                ^^^  ^^^  ^^^  ^^^
  |
  = note: `#[warn(unused_imports)]` on by default

warning: unused import: `std::fmt`
 --> crates/agi-core/src/optimization.rs:5:5
  |
5 | use std::fmt;
  |     ^^^^^^^^

warning: `agi-core` (lib) generated 2 warnings (run `cargo fix --lib -p agi-core` to apply 2 suggestions)
warning: unused import: `std::collections::HashMap`
  --> crates/agi-neural/src/lib.rs:11:5
   |
11 | use std::collections::HashMap;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: `#[warn(unused_imports)]` on by default

warning: unused imports: `AGIError`, `ErrorKind`, `Result`, `optimization::Optimizer`, and `tensor::Tensor`
  --> crates/agi-neural/src/lib.rs:17:14
   |
17 |     common::{Result, AGIError, ErrorKind},
   |              ^^^^^^  ^^^^^^^^  ^^^^^^^^^
18 |     tensor::Tensor,
   |     ^^^^^^^^^^^^^^
19 |     optimization::Optimizer,
   |     ^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `std::collections::HashMap`
 --> crates/agi-neural/src/training.rs:5:5
  |
5 | use std::collections::HashMap;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `crate::models::Model`
 --> crates/agi-neural/src/integration.rs:6:5
  |
6 | use crate::models::Model;
  |     ^^^^^^^^^^^^^^^^^^^^

warning: unused variable: `input_size`
  --> crates/agi-neural/src/models.rs:41:28
   |
41 | ...pub fn new(name: &str, input_size: usize, hidden_sizes: &[usize], out...
   |                           ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_input_size`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `hidden_sizes`
  --> crates/agi-neural/src/models.rs:41:47
   |
41 | ...tr, input_size: usize, hidden_sizes: &[usize], output_size: usize) ->...
   |                           ^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_hidden_sizes`

warning: unused variable: `output_size`
  --> crates/agi-neural/src/models.rs:41:71
   |
41 | ...idden_sizes: &[usize], output_size: usize) -> Self {
   |                           ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_output_size`

warning: variable does not need to be mutable
  --> crates/agi-neural/src/models.rs:43:13
   |
43 |         let mut layers = Vec::new();
   |             ----^^^^^^
   |             |
   |             help: remove this `mut`
   |
   = note: `#[warn(unused_mut)]` on by default

warning: unused variable: `input`
  --> crates/agi-neural/src/models.rs:56:23
   |
56 |     fn forward(&self, input: &Tensor) -> Result<Tensor, NeuralError> {
   |                       ^^^^^ help: if this is intentional, prefix it with an underscore: `_input`

warning: unused variable: `model`
  --> crates/agi-neural/src/training.rs:71:29
   |
71 |     pub fn train(&mut self, model: &mut dyn Model, dataset: &Dataset) ->...
   |                             ^^^^^ help: if this is intentional, prefix it with an underscore: `_model`

warning: unused variable: `dataset`
  --> crates/agi-neural/src/training.rs:71:52
   |
71 | ..., model: &mut dyn Model, dataset: &Dataset) -> Result<Vec<f32>, Neura...
   |                             ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_dataset`

warning: unused variable: `symbolic_data`
  --> crates/agi-neural/src/integration.rs:38:34
   |
38 | ...bolic_to_neural(&self, symbolic_data: &str) -> Result<Tensor, NeuralE...
   |                           ^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_symbolic_data`

warning: unused variable: `neural_data`
  --> crates/agi-neural/src/integration.rs:44:34
   |
44 | ...ral_to_symbolic(&self, neural_data: &Tensor) -> Result<String, Neural...
   |                           ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_neural_data`

warning: field `layers` is never read
  --> crates/agi-neural/src/models.rs:23:5
   |
21 | pub struct FeedForward {
   |            ----------- field in this struct
22 |     name: String,
23 |     layers: Vec<Layer>,
   |     ^^^^^^
   |
   = note: `#[warn(dead_code)]` on by default

warning: fields `weights`, `bias`, and `activation` are never read
  --> crates/agi-neural/src/models.rs:27:5
   |
26 | struct Layer {
   |        ----- fields in this struct
27 |     weights: Tensor,
   |     ^^^^^^^
28 |     bias: Tensor,
   |     ^^^^
29 |     activation: Activation,
   |     ^^^^^^^^^^

warning: variants `ReLU`, `Sigmoid`, `Tanh`, and `None` are never constructed
  --> crates/agi-neural/src/models.rs:33:5
   |
32 | enum Activation {
   |      ---------- variants in this enum
33 |     ReLU,
   |     ^^^^
34 |     Sigmoid,
   |     ^^^^^^^
35 |     Tanh,
   |     ^^^^
36 |     None,
   |     ^^^^

warning: fields `optimizer`, `loss_fn`, `batch_size`, and `epochs` are never read
  --> crates/agi-neural/src/training.rs:53:5
   |
52 | pub struct Trainer<O: Optimizer, L: LossFunction> {
   |            ------- fields in this struct
53 |     optimizer: O,
   |     ^^^^^^^^^
54 |     loss_fn: L,
   |     ^^^^^^^
55 |     batch_size: usize,
   |     ^^^^^^^^^^
56 |     epochs: usize,
   |     ^^^^^^

warning: field `batch_size` is never read
  --> crates/agi-neural/src/inference.rs:11:5
   |
10 | pub struct InferenceEngine {
   |            --------------- field in this struct
11 |     batch_size: usize,
   |     ^^^^^^^^^^

warning: `agi-neural` (lib) generated 18 warnings (run `cargo fix --lib -p agi-neural` to apply 4 suggestions)
warning: unused imports: `Arc`, `Mutex`, and `RwLock`
  --> crates/agi-symbolic/src/lib.rs:13:17
   |
13 | use std::sync::{Arc, Mutex, RwLock};
   |                 ^^^  ^^^^^  ^^^^^^
   |
   = note: `#[warn(unused_imports)]` on by default

warning: unused import: `std::error::Error`
  --> crates/agi-symbolic/src/lib.rs:14:5
   |
14 | use std::error::Error;
   |     ^^^^^^^^^^^^^^^^^

warning: unused imports: `AGIError`, `ErrorKind`, and `Result`
  --> crates/agi-symbolic/src/lib.rs:17:14
   |
17 |     common::{Result, AGIError, ErrorKind},
   |              ^^^^^^  ^^^^^^^^  ^^^^^^^^^

warning: `agi-symbolic` (lib) generated 3 warnings (run `cargo fix --lib -p agi-symbolic` to apply 3 suggestions)
warning: unused import: `Duration`
  --> crates/agi-interaction/src/lib.rs:14:17
   |
14 | use std::time::{Duration, Instant};
   |                 ^^^^^^^^
   |
   = note: `#[warn(unused_imports)]` on by default

warning: unused import: `std::error::Error`
  --> crates/agi-interaction/src/lib.rs:15:5
   |
15 | use std::error::Error;
   |     ^^^^^^^^^^^^^^^^^

warning: unused imports: `Arc`, `Mutex`, and `RwLock`
  --> crates/agi-security/src/lib.rs:13:17
   |
13 | use std::sync::{Arc, Mutex, RwLock};
   |                 ^^^  ^^^^^  ^^^^^^
   |
   = note: `#[warn(unused_imports)]` on by default

warning: unused imports: `AGIError` and `ErrorKind`
  --> crates/agi-security/src/lib.rs:18:36
   |
18 |     common::{Result as CoreResult, AGIError, ErrorKind},
   |                                    ^^^^^^^^  ^^^^^^^^^

warning: field `name` is never read
  --> crates/agi-security/src/lib.rs:57:5
   |
55 | pub struct Policy {
   |            ------ field in this struct
56 |     /// 策略名称
57 |     name: String,
   |     ^^^^
   |
   = note: `Policy` has derived impls for the traits `Clone` and `Debug`, but these are intentionally ignored during dead code analysis
   = note: `#[warn(dead_code)]` on by default

warning: field `name` is never read
   --> crates/agi-security/src/lib.rs:419:5
    |
417 | pub struct ThreatDetector {
    |            -------------- field in this struct
418 |     /// 检测器名称
419 |     name: String,
    |     ^^^^
    |
    = note: `ThreatDetector` has a derived impl for the trait `Debug`, but this is intentionally ignored during dead code analysis

warning: unused import: `Duration`
  --> crates/agi-reflection/src/lib.rs:13:17
   |
13 | use std::time::{Duration, Instant};
   |                 ^^^^^^^^
   |
   = note: `#[warn(unused_imports)]` on by default

warning: `agi-interaction` (lib) generated 2 warnings (run `cargo fix --lib -p agi-interaction` to apply 1 suggestion)
warning: `agi-security` (lib) generated 4 warnings (run `cargo fix --lib -p agi-security` to apply 2 suggestions)
warning: `agi-reflection` (lib) generated 1 warning (run `cargo fix --lib -p agi-reflection` to apply 1 suggestion)
    Checking rust_agi_os v0.1.0 (/home/ubuntu/agi_lang_project)
error[E0432]: unresolved import `crate::neuro_symbolic::symbolic::SymbolicKnowledgeBase`
  --> src/neuro_symbolic/integration.rs:11:39
   |
11 | use crate::neuro_symbolic::symbolic::{SymbolicKnowledgeBase, SymbolicError, Fact, Rule, Query, QueryResult};
   |                                       ^^^^^^^^^^^^^^^^^^^^^ no `SymbolicKnowledgeBase` in `neuro_symbolic::symbolic`

error[E0432]: unresolved imports `crate::neuro_symbolic::knowledge::KnowledgeGraph`, `crate::neuro_symbolic::knowledge::Entity`
  --> src/neuro_symbolic/integration.rs:12:40
   |
12 | use crate::neuro_symbolic::knowledge::{KnowledgeGraph, KnowledgeError, Entity, Relation};
   |                                        ^^^^^^^^^^^^^^                  ^^^^^^ no `Entity` in `neuro_symbolic::knowledge`
   |                                        |
   |                                        no `KnowledgeGraph` in `neuro_symbolic::knowledge`
   |                                        help: a similar name exists in the module: `KnowledgeError`
   |
   = help: consider importing this struct instead:
           crate::interaction::natural_language::Entity

error[E0432]: unresolved import `crate::neuro_symbolic::symbolic::SymbolicKnowledgeBase`
  --> src/neuro_symbolic/learning.rs:11:39
   |
11 | use crate::neuro_symbolic::symbolic::{SymbolicKnowledgeBase, SymbolicError, Fact, Rule};
   |                                       ^^^^^^^^^^^^^^^^^^^^^ no `SymbolicKnowledgeBase` in `neuro_symbolic::symbolic`

error[E0425]: cannot find function `get_status` in module `performance`
   --> src/reflection/mod.rs:107:42
    |
107 |         performance_status: performance::get_status().map_err(ReflectionError::PerformanceError)?,
    |                                          ^^^^^^^^^^ not found in `performance`
    |
help: consider importing one of these functions
    |
12  + use crate::interaction::get_status;
    |
12  + use crate::interaction::interface::get_status;
    |
12  + use crate::interaction::multimodal::get_status;
    |
12  + use crate::interaction::natural_language::get_status;
    |
      and 29 other candidates
help: if you import `get_status`, refer to it directly
    |
107 -         performance_status: performance::get_status().map_err(ReflectionError::PerformanceError)?,
107 +         performance_status: get_status().map_err(ReflectionError::PerformanceError)?,
    |

error[E0425]: cannot find function `set_config` in module `performance`
   --> src/reflection/mod.rs:116:18
    |
116 |     performance::set_config(config.performance_config).map_err(ReflectionError::PerformanceError)?;
    |                  ^^^^^^^^^^ not found in `performance`
    |
help: consider importing one of these functions
    |
12  + use crate::interaction::interface::set_config;
    |
12  + use crate::interaction::multimodal::set_config;
    |
12  + use crate::interaction::natural_language::set_config;
    |
12  + use crate::interaction::set_config;
    |
      and 27 other candidates
help: if you import `set_config`, refer to it directly
    |
116 -     performance::set_config(config.performance_config).map_err(ReflectionError::PerformanceError)?;
116 +     set_config(config.performance_config).map_err(ReflectionError::PerformanceError)?;
    |

error[E0425]: cannot find function `get_status` in module `threat_detection`
   --> src/security/mod.rs:120:52
    |
120 |         threat_detection_status: threat_detection::get_status().map_err(SecurityError::ThreatDetectionError)?,
    |                                                    ^^^^^^^^^^ not found in `threat_detection`
    |
help: consider importing one of these functions
    |
12  + use crate::interaction::get_status;
    |
12  + use crate::interaction::interface::get_status;
    |
12  + use crate::interaction::multimodal::get_status;
    |
12  + use crate::interaction::natural_language::get_status;
    |
      and 29 other candidates
help: if you import `get_status`, refer to it directly
    |
120 -         threat_detection_status: threat_detection::get_status().map_err(SecurityError::ThreatDetectionError)?,
120 +         threat_detection_status: get_status().map_err(SecurityError::ThreatDetectionError)?,
    |

error[E0425]: cannot find function `set_config` in module `threat_detection`
   --> src/security/mod.rs:130:23
    |
130 |     threat_detection::set_config(config.threat_detection_config).map_err(SecurityError::ThreatDetectionError)?;
    |                       ^^^^^^^^^^ not found in `threat_detection`
    |
help: consider importing one of these functions
    |
12  + use crate::interaction::interface::set_config;
    |
12  + use crate::interaction::multimodal::set_config;
    |
12  + use crate::interaction::natural_language::set_config;
    |
12  + use crate::interaction::set_config;
    |
      and 27 other candidates
help: if you import `set_config`, refer to it directly
    |
130 -     threat_detection::set_config(config.threat_detection_config).map_err(SecurityError::ThreatDetectionError)?;
130 +     set_config(config.threat_detection_config).map_err(SecurityError::ThreatDetectionError)?;
    |

warning: unused import: `lazy_static::lazy_static`
 --> src/lib.rs:9:5
  |
9 | use lazy_static::lazy_static;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = note: `#[warn(unused_imports)]` on by default

warning: unused import: `Duration`
 --> src/kernel/process.rs:8:17
  |
8 | use std::time::{Duration, Instant};
  |                 ^^^^^^^^

warning: unused imports: `Arc` and `Mutex`
 --> src/neuro_symbolic/neural.rs:6:17
  |
6 | use std::sync::{Arc, Mutex, Once};
  |                 ^^^  ^^^^^

warning: unused imports: `Arc` and `Mutex`
 --> src/neuro_symbolic/symbolic.rs:6:17
  |
6 | use std::sync::{Arc, Mutex, Once};
  |                 ^^^  ^^^^^

warning: unused imports: `Arc` and `Mutex`
 --> src/neuro_symbolic/knowledge.rs:6:17
  |
6 | use std::sync::{Arc, Mutex, Once};
  |                 ^^^  ^^^^^

warning: unused import: `Relation`
  --> src/neuro_symbolic/integration.rs:12:80
   |
12 | use crate::neuro_symbolic::knowledge::{KnowledgeGraph, KnowledgeError, Entity, Relation};
   |                                                                                ^^^^^^^^

warning: unused imports: `Arc` and `Mutex`
 --> src/reflection/introspection.rs:6:17
  |
6 | use std::sync::{Arc, Mutex, Once};
  |                 ^^^  ^^^^^

warning: unused imports: `Arc` and `Mutex`
 --> src/reflection/code_gen.rs:6:17
  |
6 | use std::sync::{Arc, Mutex, Once};
  |                 ^^^  ^^^^^

warning: unused import: `std::path::PathBuf`
 --> src/reflection/code_gen.rs:8:5
  |
8 | use std::path::PathBuf;
  |     ^^^^^^^^^^^^^^^^^^

warning: unused imports: `Arc` and `Mutex`
 --> src/reflection/evolution.rs:6:17
  |
6 | use std::sync::{Arc, Mutex, Once};
  |                 ^^^  ^^^^^

warning: unused import: `std::time::Instant`
 --> src/reflection/evolution.rs:8:5
  |
8 | use std::time::Instant;
  |     ^^^^^^^^^^^^^^^^^^

warning: unused imports: `Arc` and `Mutex`
 --> src/reflection/performance.rs:6:17
  |
6 | use std::sync::{Arc, Mutex, Once};
  |                 ^^^  ^^^^^

warning: unused import: `std::path::PathBuf`
 --> src/security/verification.rs:8:5
  |
8 | use std::path::PathBuf;
  |     ^^^^^^^^^^^^^^^^^^

warning: unused imports: `Fact` and `Rule`
  --> src/security/verification.rs:10:39
   |
10 | use crate::neuro_symbolic::symbolic::{Rule, Fact};
   |                                       ^^^^  ^^^^
(Content truncated due to size limit. Use line ranges to read in chunks)